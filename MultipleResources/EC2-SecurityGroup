Parameters:
  NameOfService:
    Description: "Service used on this stack."
    Type: String
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access.
    Type: AWS::EC2::KeyPair::KeyName
  VpcId:
    Description: Select VPC ID
    Type: AWS::EC2::VPC::Id
  SubnetId:
    Description: Select your Subnet ID
    Type: AWS::EC2::Subnet::Id

Mappings:
  RegionMap:
    us-west-1:
      AMI: ami-0e86606d
    us-west-2:
      AMI: ami-0ad99772

Resources:
  EC2Instance:
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Init:
        config:
          packages:
            yum:
              httpd: []
              php: []
          files:
            /var/www/html/index.php:
              content: !Sub |
                <?php print "Hello world Nick was here!"; ?>
          services:
            sysvinit:
              httpd:
                enabled: true
                ensureRunning: true
    Properties:
      InstanceType: t2.micro
      ImageId:
        Fn::FindInMap:
        - RegionMap
        - !Ref AWS::Region
        - AMI
      SecurityGroupIds:
        - !Ref MySecurityGroup
      SubnetId: !Ref SubnetId
      Tags:
        - Key: Name
          Value: !Ref NameOfService
      KeyName: !Ref KeyName
      UserData:
        'Fn::Base64':
          !Sub |
            #!/bin/bash -xe
            # Ensure AWS CFN Bootstrap is the latest
            yum install -y aws-cfn-bootstrap
            # Install the files and packages from the metadata
            /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource EC2Instance  --region ${AWS::Region}
            yum update -y

  MySecurityGroup:   #Logical ID
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable inbound 22 & 80
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0

Outputs:
  ServerDNS:
    Description: EC2 Instance DNS Value
    Value: !GetAtt
      - EC2Instance   # Logical ID of Created instance above
      - PublicDnsName
    Export:
      Name: !Join [ ":", [ !Ref "AWS::StackName", ServerDNS ] ]
  Website:
    Description: The Public DNS for the EC2 Instance
    Value: !Sub 'http://${EC2Instance.PublicDnsName}'

